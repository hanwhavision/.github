name: Magic Backend Deploy
run-name: ${{ inputs.backend_repo}} - ${{ inputs.release_env }}

permissions: 
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      node_versions:
        required: false
        description: "List of node version which want to scan"
        type: string
        default: "['20.14.0']" # "['18.16']"
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      backend_repo:
        description: 'Backend Repo'
        required: true
        default: ""
        type: string
      target_branch:
          description: 'Target Branch'
          required: true
          default: ""
          type: string
      target_version:
          description: 'Target Version'
          required: false
          default: ""
          type: string

jobs:
  init:
    runs-on: ubuntu-latest
    environment: magic_backend_${{ inputs.target_branch }}
    
    outputs:
      region: ${{ steps.set_env.outputs.region }}
      s3_bucket: ${{ steps.set_env.outputs.s3_bucket }}
      s3_account: ${{ steps.set_env.outputs.s3_account }}
      env_bucket: ${{ steps.set_env.outputs.env_bucket }}

    steps:
      - name: Set Environment Variables
        id: set_env
        run: |
          echo "region=${{ vars.REGION }}" >> $GITHUB_OUTPUT
          echo "s3_bucket=${{ vars.S3_BUCKET }}" >> $GITHUB_OUTPUT
          echo "s3_account=${{ vars.S3_ACCOUNT }}" >> $GITHUB_OUTPUT
          echo "env_bucket=${{ vars.ENV_BUCKET }}" >> $GITHUB_OUTPUT

  pnpm-build:
    name: Run Node Build
    runs-on: ubuntu-latest
    environment: aws
    needs: [init]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Checkout
        if: inputs.target_branch != 'production'
        uses: actions/checkout@v4
        with:
          repository: hanwhavision/${{ inputs.backend_repo }}
          ref: refs/heads/${{ inputs.target_branch }}
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}

      - name: Setup Node.js
        if: inputs.target_branch != 'production'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install specific npm version
        if: inputs.target_branch != 'production'
        run: npm install -g npm@10.2.4

      - name: Verify npm version
        if: inputs.target_branch != 'production'
        run: npm --version

      - name: Install dependencies
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm install --no-optional
          npm install --cpu=arm64 --os=linux sharp

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_OIDC_ROLE }}
          role-session-name: GitHub-Actions-Assume
          aws-region: ${{ needs.init.outputs.region }}

      - name: Modify deploy script to get and refine env file
        if: inputs.target_branch != 'production'
        run: |
          # Define the bucket
          bucket="${{ needs.init.outputs.env_bucket }}"
          env_script="aws s3 sync s3://${bucket}/latest/ /home/ubuntu/.toolbox2/"
          sed -i "/^aws s3 sync/ s|.*|${env_script}|" ./codedeploy/deploy.sh
          
          # App version
          app_version="${{ inputs.release_version }}"
          sed -i "/^APP_VERSION=/ s|.*|APP_VERSION=${app_version}|" ./codedeploy/deploy.sh

          # Env file name
          env_file="qa.env"
          sed -i "/^ENV_FILE=/ s|.*|ENV_FILE=${env_file}|" ./codedeploy/deploy.sh

      - name: Build
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm run build
          echo "================"
          ls -al src

      - name: Zip build output
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          zip -qry deploy.zip .

      - name: Prepare deploy artifact for production
        if: inputs.target_branch == 'production'
        run: |
          # Fetch QA build artifact
          if [ "${{ inputs.target_version }}" == "hotfix" ]; then
            target_bucket="s3://tbp-cicd-hotfix-d-an2/api/deploy.zip"
          else
            target_bucket="s3://tbp020-cicd-q-ue1/api/deploy.zip"
          fi
          
          aws s3 cp ${target_bucket} ./deploy.zip --only-show-errors
          
          # Unzip the artifact
          unzip deploy.zip -d /tmp/deploy

          # Update target environment bucket
          bucket="${{ needs.init.outputs.env_bucket }}"
          env_script="aws s3 sync s3://${bucket}/latest/ /home/ubuntu/.toolbox2/"
          sed -i "/^aws s3 sync/ s|.*|${env_script}|" /tmp/deploy/codedeploy/deploy.sh
          
          # Modify deploy script
          app_version="${{ inputs.release_version }}"
          sed -i "/^APP_VERSION=/ s|.*|APP_VERSION=${app_version}|" /tmp/deploy/codedeploy/deploy.sh
          env_file="production.env"
          sed -i "/^ENV_FILE=/ s|.*|ENV_FILE=${env_file}|" /tmp/deploy/codedeploy/deploy.sh
          
          # Recreate the deploy.zip with updated files
          cd /tmp/deploy
          zip -qry $GITHUB_WORKSPACE/deploy_modified.zip .

      - name: Push build artifact to S3 Bucket
        working-directory: ${{ inputs.working_dir }}
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.init.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          # Upload build artifact to S3 bucket
          if [ "${{ inputs.target_branch }}" == "production" ]; then
            echo "production upload"
            aws s3 cp $GITHUB_WORKSPACE/deploy_modified.zip s3://${{ needs.init.outputs.s3_bucket }}/api/deploy.zip --only-show-errors --metadata version=${{ inputs.release_version }}
          else
            aws s3 cp ./deploy.zip s3://${{ needs.init.outputs.s3_bucket }}/api/deploy.zip --only-show-errors --metadata version=${{ inputs.release_version }}
          fi
          
          aws sts get-caller-identity

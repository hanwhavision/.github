name: Build npm and Deploy to S3 and invalidate CloudFront
run-name: ${{ inputs.frontend_repo}} - ${{ inputs.release_env }}

permissions: 
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      node_versions:
        required: false
        description: "List of node version which want to scan"
        type: string
        default: "['20.11.1']"
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      frontend_repo:
        description: 'Frontend Repo'
        required: true
        default: ""
        type: string
      target_branch:
        description: 'Target Branch'
        required: true
        default: ""
        type: string
      target_version:
        description: 'Target Version'
        required: false
        default: ""
        type: string

jobs:
  initial-tasks: 
    name: Initial tasks
    runs-on: ubuntu-latest
    environment: datahub_frontend_${{ inputs.target_branch }} 
    outputs:
      region: ${{ steps.set_env.outputs.region }}
      s3_bucket: ${{ steps.set_env.outputs.s3_bucket }}
      s3_account: ${{ steps.set_env.outputs.s3_account }}
      cloudfront_distribution_id: ${{ vars.CF_DISTRIBUTION_ID }}
  
    steps:
      - name: set env
        id: set_env
        run: |
          echo "region=${{ vars.REGION }}" >> $GITHUB_OUTPUT
          echo "s3_bucket=${{ vars.S3_BUCKET }}" >> $GITHUB_OUTPUT
          echo "s3_account=${{ vars.S3_ACCOUNT }}" >> $GITHUB_OUTPUT   

  npm-build:
    name: Run npm build and release to S3 and invalidate CloudFront
    environment: aws
    runs-on: ubuntu-latest
    needs: [initial-tasks]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}
        # node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Checkout
        if: inputs.target_branch != 'production'
        uses: actions/checkout@v4
        with:
          repository: hanwhavision/${{ inputs.frontend_repo }}
          ref: refs/heads/${{ inputs.target_branch}}
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}

      - name: Setup Node.js
        if: inputs.target_branch != 'production'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: npm install

      - name: Build
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          echo "build qa environment"
          CI=false npm run build:qa
            
      # Login To HVC_Admin_Automation for Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_OIDC_ROLE }}
          role-session-name: GitHub-Actions-Assume
          aws-region: ${{ needs.initial-tasks.outputs.region }}

      - name: Push build artifact to S3 Bucket and invalidation CloudFront
        working-directory: ${{ inputs.working_dir }}
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.initial-tasks.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')
          
          # Upload build artifact to S3 bucket and This command triggers the CodePipeline.
          if [ "${{ inputs.target_branch }}" == "production" ]; then
            if [ "${{ inputs.target_version }}" == "hotfix" ]; then
              aws s3 sync s3://tbp-datahub-hotfix-d-an2/ s3://${{ needs.initial-tasks.outputs.s3_bucket }} --delete --region ${{ needs.initial-tasks.outputs.region }}
            else
              aws s3 sync s3://tbp020-datahub-q-ue1/ s3://${{ needs.initial-tasks.outputs.s3_bucket }} --delete --region ${{ needs.initial-tasks.outputs.region }}
            fi
          else
            aws s3 sync ./dist s3://${{ needs.initial-tasks.outputs.s3_bucket }} --delete --region ${{ needs.initial-tasks.outputs.region }}
          fi

          # Setting CloudFront
          aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id }} --paths "/*"

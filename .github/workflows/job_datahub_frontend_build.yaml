name: Build npm and Deploy to S3 and invalidate CloudFront
run-name: ${{ inputs.frontend_repo}} - ${{ inputs.release_env }}

permissions: 
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      node_versions:
        required: false
        description: "List of node version which want to scan"
        type: string
        default: "['20.11.1']"
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      frontend_repo:
        description: 'Frontend Repo'
        required: true
        default: ""
        type: string
      target_branch:
        description: 'Target Branch'
        required: true
        default: ""
        type: string
      target_version:
        description: 'Target Version'
        required: false
        default: ""
        type: string

jobs:
  initial-tasks: 
    name: Initial tasks
    runs-on: ubuntu-latest
    environment: datahub_frontend_${{ inputs.target_branch }} 
    outputs:
      region: ${{ steps.set_env.outputs.region }}
      s3_bucket: ${{ steps.set_env.outputs.s3_bucket }}
      s3_rollback_bucket: ${{ vars.S3_ROLLBACK_BUCKET }}
      s3_account: ${{ steps.set_env.outputs.s3_account }}
      s3_environment: ${{ vars.S3_ENVIRONMENT_BUCKET }}
      cloudfront_distribution_id: ${{ vars.CF_DISTRIBUTION_ID }}
  
    steps:
      - name: set env
        id: set_env
        run: |
          echo "region=${{ vars.REGION }}" >> $GITHUB_OUTPUT
          echo "s3_bucket=${{ vars.S3_BUCKET }}" >> $GITHUB_OUTPUT
          echo "s3_account=${{ vars.S3_ACCOUNT }}" >> $GITHUB_OUTPUT   

  npm-build:
    name: Run npm build and release to S3 and invalidate CloudFront
    environment: aws
    runs-on: ubuntu-latest
    needs: [initial-tasks]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}
    steps:
      - name: Checkout
        if: inputs.target_branch != 'production'
        uses: actions/checkout@v4
        with:
          repository: hanwhavision/${{ inputs.frontend_repo }}
          ref: refs/heads/${{ inputs.target_branch}}
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}

      - name: Setup Node.js
        if: inputs.target_branch != 'production'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: npm install
      
      # Login To HVC_Admin_Automation for Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_OIDC_ROLE }}
          role-session-name: GitHub-Actions-Assume
          aws-region: ${{ needs.initial-tasks.outputs.region }}

      - name: Download environment file from S3
        if: inputs.target_branch != 'production'
        run: |
          set -euo pipefail
          aws s3 cp s3://${{ needs.initial-tasks.outputs.s3_environment }}/frontend/latest/release.env ./release.env \
            --only-show-errors

          release_version=${{ inputs.release_version }}
          prod_version=$(echo "$release_version" | awk -F '-' '{print $1}')

          sed -i "/^VITE_APP_VERSION=/ s|.*|VITE_APP_VERSION=${prod_version}|" ./release.env
          sed -i "/^VITE_APP_QA_VERSION=/ s|.*|VITE_APP_QA_VERSION=${release_version}|" ./release.env

      - name: Build
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          set -euo pipefail
          echo "build qa environment"
          CI=false npm run build

      - name: Zip build output
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          set -euo pipefail
          cd ./dist/
          zip -qry $GITHUB_WORKSPACE/frontend.zip ./
          if [ -f "$GITHUB_WORKSPACE/frontend.zip" ]; then
            echo "Zip file created successfully."
          else
            echo "Error: frontend.zip was not created."
            exit 1
          fi

      - name: Push build artifact to S3 Bucket and invalidation CloudFront
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          set -euo pipefail

          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.initial-tasks.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')
          
          # Hashed 파일 (immutable 적용)
          aws s3 sync ./dist s3://${{ needs.initial-tasks.outputs.s3_bucket }} \
            --no-progress --only-show-errors --delete \
            --exclude "*" \
            --include "assets/*" \
            --cache-control max-age=31536000,s-maxage=31536000,immutable \
            --region ${{ needs.initial-tasks.outputs.region }}

          # index.html 등은 최신으로 유지
          aws s3 sync ./dist s3://${{ needs.initial-tasks.outputs.s3_bucket }} \
            --no-progress --only-show-errors \
            --exact-timestamps \
            --exclude "*" \
            --include "index.html" \
            --include "robots.txt" \
            --include "favicon.ico" \
            --cache-control max-age=0,s-maxage=31536000 \
            --region ${{ needs.initial-tasks.outputs.region }}

          aws s3 cp $GITHUB_WORKSPACE/frontend.zip \
            s3://${{ needs.initial-tasks.outputs.s3_rollback_bucket }}/frontend/datahub/${{ inputs.release_version }}/frontend.zip \
            --only-show-errors \
            --region ${{ needs.initial-tasks.outputs.region }}

          # CloudFront Invalidations
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id }} \
            --paths "/index.html" "/robots.txt" "/favicon.ico"

      - name: Promote from QA/hotfix to PROD bucket & unify Cache-Control & Invalidate CF
        if: inputs.target_branch == 'production'
        run: |
          set -euo pipefail
          
          # Cross-account assume role for target S3
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.initial-tasks.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          SRC_BUCKET=""
          if [ "${{ inputs.target_version }}" == "hotfix" ]; then
            SRC_BUCKET="tbp-datahub-hotfix-d-an2"
          else
            SRC_BUCKET="tbp020-datahub-q-ue1"
          fi
          [ -n "$SRC_BUCKET" ] || { echo "SRC_BUCKET not set"; exit 1; }

          # 1) sync from source bucket to prod bucket (metadata is copied as-is)
          aws s3 sync s3://$SRC_BUCKET/ s3://${{ needs.initial-tasks.outputs.s3_bucket }} \
            --only-show-errors --delete \
            --region ${{ needs.initial-tasks.outputs.region }}

          # 2) rollback artifact
          mkdir -p ./rollback
          aws s3 sync s3://$SRC_BUCKET/ ./rollback \
            --only-show-errors
          (cd ./rollback && zip -qry $GITHUB_WORKSPACE/frontend.zip ./)
          aws s3 cp $GITHUB_WORKSPACE/frontend.zip \
            s3://${{ needs.initial-tasks.outputs.s3_rollback_bucket }}/frontend/datahub/${{ inputs.release_version }}/frontend.zip \
            --only-show-errors \
            --region ${{ needs.initial-tasks.outputs.region }}

          # 3) Ensure root files have uniform Cache-Control in PROD as well
          #    NOTE: metadata-directive REPLACE requires explicit content-type.
          aws s3 cp s3://${{ needs.initial-tasks.outputs.s3_bucket }}/index.html s3://${{ needs.initial-tasks.outputs.s3_bucket }}/index.html \
            --metadata-directive REPLACE \
            --cache-control "max-age=0,s-maxage=31536000" \
            --content-type "text/html" \
            --only-show-errors \
            --region ${{ needs.initial-tasks.outputs.region }}

          aws s3 cp s3://${{ needs.initial-tasks.outputs.s3_bucket }}/robots.txt s3://${{ needs.initial-tasks.outputs.s3_bucket }}/robots.txt \
            --metadata-directive REPLACE \
            --cache-control "max-age=0,s-maxage=31536000" \
            --content-type "text/plain" \
            --only-show-errors \
            --region ${{ needs.initial-tasks.outputs.region }}

          aws s3 cp s3://${{ needs.initial-tasks.outputs.s3_bucket }}/favicon.ico s3://${{ needs.initial-tasks.outputs.s3_bucket }}/favicon.ico \
            --metadata-directive REPLACE \
            --cache-control "max-age=0,s-maxage=31536000" \
            --content-type "image/x-icon" \
            --only-show-errors \
            --region ${{ needs.initial-tasks.outputs.region }}

          # (선택) assets/* 헤더가 필요하면 QA 쪽이 이미 immutable로 올라오므로 보통 추가 작업 불필요.

          # 4) CloudFront invalidation (minimal)
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id }} \
            --paths "/index.html" "/robots.txt" "/favicon.ico"

  notify-success:
    if: ${{ success() }}
    needs: [npm-build]
    runs-on: ubuntu-latest
    steps:
      - name: Send success message to Teams
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "type": "AdaptiveCard",
                  "body": [
                    {
                      "type": "TextBlock",
                      "text": "✅ DataHub ${{ inputs.target_branch }} Frontend Deployment Success",
                      "weight": "Bolder",
                      "color": "Good"
                    },
                    {
                      "type": "TextBlock",
                      "text": "브랜치: ${{ github.ref }}\n커밋: ${{ github.sha }}\n배포자: ${{ github.actor }}\n[워크플로 보기](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                      "wrap": true
                    }
                  ],
                  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "version": "1.0"
                }
              }
            ]
          }' --fail --silent --show-error ${{ secrets.DESIGNPRO_TEAMS_WEBHOOK_URL }}

  notify-failure:
    if: ${{ failure() }}
    needs: [npm-build]
    runs-on: ubuntu-latest
    steps:
      - name: Send failure message to Teams
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "type": "AdaptiveCard",
                  "body": [
                    {
                      "type": "TextBlock",
                      "text": "🚨 DataHub ${{ inputs.target_branch }} Frontend Deployment failed",
                      "weight": "Bolder",
                      "color": "Attention"
                    },
                    {
                      "type": "TextBlock",
                      "text": "브랜치: ${{ github.ref }}\n커밋: ${{ github.sha }}\n배포자: ${{ github.actor }}\n[워크플로 보기](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                      "wrap": true
                    }
                  ],
                  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "version": "1.0"
                }
              }
            ]
          }' --fail --silent --show-error ${{ secrets.DESIGNPRO_TEAMS_WEBHOOK_URL }}
